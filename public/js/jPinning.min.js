!(function (a) {
  a.fn.jPinning = function (b) {
    var c = { offset: !1, onPin() {}, onUnpin() {} }, d = a.extend({}, c, b), e = {
        lastScrollTop: 0, document: a(document), window: a(window), status: 'pinned'
      }, f = {
        nav: 'pinning-nav', pinned: 'pinned', unpinned: 'unpinned', top: 'pinning-top'
      }, g = {
        isUnpinned() { return e.status == 'unpinned' ? !0 : !1; }, isPinned() { return e.status == 'pinned' ? !0 : !1; }, prepare() { e.target.addClass(f.nav), e.target.css('position', 'fixed'); }, pin() { g.isUnpinned() && (e.status = 'pinned', e.target.removeClass(f.unpinned).addClass(f.pinned), d.onPin.call(e.target)); }, unpin() { g.isPinned() && (e.status = 'unpinned', e.target.removeClass(f.pinned).removeClass(f.top).addClass(f.unpinned), d.onUnpin.call(e.target)); }, calcOffset(a) { return d.offset == 'auto' && (d.offset = e.target.outerHeight()), d.offset ? a > d.offset ? !0 : !1 : !0; }, pinHandler() { let a = e.window.scrollTop(), b = e.document.height() - e.window.height(); if (a < 0 && (a = 0), a >= b && (a = b, e.lastScrollTop = a - 1), a == 0 && e.target.addClass(f.top), a <= e.lastScrollTop)g.pin(); else { const c = g.calcOffset(a); c && g.unpin(); }e.lastScrollTop = a; }
      }; return this.each(function () { e.target = a(this), g.prepare(), a(window).on('scroll', g.pinHandler); });
  };
}(jQuery));
